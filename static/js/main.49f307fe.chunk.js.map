{"version":3,"sources":["Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["ResetIcon","width","height","viewBox","xmlns","fillRule","clipRule","d","Form","onClickColorReset","e","resetState","id","name","year","color","pantone_value","setState","localStorage","setItem","JSON","stringify","handleClick","currentType","target","prevState","state","error","isLoaded","data","bind","rememberState","getItem","this","parse","fetch","then","res","json","result","console","log","tableTemplate","map","el","i","key","className","style","backgroundColor","lg","onClick","disabled","type","onChange","checked","Component","App","fluid","center","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0SAIMA,EAAY,kBAChB,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,8BACpD,0BAAMC,SAAS,UAAUC,SAAS,UAAUC,EAAE,mUAC9C,0BAAMA,EAAE,2GACR,0BAAMF,SAAS,UAAUC,SAAS,UAAUC,EAAE,4DAiLnCC,E,kDA3Kb,aAAe,IAAD,8BACZ,gBAuCFC,kBAAoB,SAACC,GACnB,IAAMC,EAAa,CACjBC,IAAI,EACJC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,eAAe,GAGjB,EAAKC,SAAL,eAAkBN,IAClBO,aAAaC,QAAQ,QAASC,KAAKC,UAAUV,KAlDjC,EAsDdW,YAAc,SAACZ,GACb,IAAMa,EAAcb,EAAEc,OAAOZ,GAC7B,EAAKK,UAAS,SAACQ,GACZ,OAAO,eAAGF,GAAeE,EAAUF,OACnC,kBAAML,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKK,YAxD3D,EAAKA,MAAQ,CACXd,IAAI,EACJC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,eAAe,EACfW,MAAO,KACPC,UAAU,EACVC,KAAM,IAGR,EAAKpB,kBAAoB,EAAKA,kBAAkBqB,KAAvB,gBACzB,EAAKR,YAAc,EAAKA,YAAYQ,KAAjB,gBAdP,E,gEAiBO,IAAD,OACZC,EAAgBb,aAAac,QAAQ,SAC3CC,KAAKhB,SAAL,eAAmBG,KAAKc,MAAMH,KAE9BI,MAAM,6CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCC,QAAQC,IAAIF,EAAOV,MACnB,EAAKZ,SAAS,CACZW,UAAU,EACVC,KAAMU,EAAOV,UAGjB,SAACF,GACC,EAAKV,SAAS,CACZW,UAAU,EACVD,e,+BA2BA,IAAD,SAEgDM,KAAKP,MAApDd,EAFD,EAECA,GAAIC,EAFL,EAEKA,KAAMC,EAFX,EAEWA,KAAMC,EAFjB,EAEiBA,MAAOC,EAFxB,EAEwBA,cAEzB0B,EAJC,EAEuCb,KAEnBc,KAAI,SAACC,EAAIC,GAClC,OACE,wBAAIC,IAAKD,GACP,wBACEE,UAAW,EAAKrB,MAAMd,GAAK,GAAK,aAC/BgC,EAAGhC,IAEN,wBACEmC,UAAW,EAAKrB,MAAMb,KAAO,GAAK,aACjC+B,EAAG/B,MAEN,wBACEkC,UAAW,EAAKrB,MAAMZ,KAAO,GAAK,aACjC8B,EAAG9B,MAEN,wBACEiC,UAAW,EAAKrB,MAAMX,MAAQ,GAAK,aACnC,yBACEiC,MAAO,CAACC,gBAAiBL,EAAG7B,OACzBgC,UAAU,gBACdH,EAAG7B,OACN,wBACEgC,UAAW,EAAKrB,MAAMV,cAAgB,GAAK,aAC1C4B,EAAG5B,mBAMZ,OAEE,6BACE,kBAAC,OAAD,KACE,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKkC,GAAI,GACJH,UAAU,eACb,yBACEA,UAAU,gBADZ,kBAIA,4BACEA,UAAU,YACVI,QAASlB,KAAKxB,kBACd2C,SAAUxC,GAAMC,GAAQC,GAAQC,GAASC,GAEzC,kBAAC,EAAD,MALF,UASF,kBAAC,MAAD,CAAKkC,GAAI,IACP,2BACEH,UAAU,SACR,+BACE,4BACE,wBACEA,UAAWd,KAAKP,MAAMd,GAAK,GAAK,aAChC,2BAAOyC,KAAK,WACLC,SAAUrB,KAAKX,YACfiC,QAAStB,KAAKP,MAAMd,GACpBA,GAAG,OALZ,MASA,wBACEmC,UAAWd,KAAKP,MAAMb,KAAO,GAAK,aAClC,2BAAOwC,KAAK,WACLE,QAAStB,KAAKP,MAAMb,KACpByC,SAAUrB,KAAKX,YACfV,GAAG,SALZ,QAQA,wBACEmC,UAAWd,KAAKP,MAAMZ,KAAO,GAAK,aAClC,2BAAOuC,KAAK,WACLE,QAAStB,KAAKP,MAAMZ,KACpBwC,SAAUrB,KAAKX,YACtBV,GAAG,SALL,QAQA,wBACEmC,UAAWd,KAAKP,MAAMX,MAAQ,GAAK,aACnC,2BAAOsC,KAAK,WACLE,QAAStB,KAAKP,MAAMX,MACpBuC,SAAUrB,KAAKX,YACtBV,GAAG,UALL,SAQA,wBAAImC,UAAWd,KAAKP,MAAMV,cAAgB,GAAK,aAC7C,2BAAOqC,KAAK,WACLE,QAAStB,KAAKP,MAAMV,cACpBsC,SAAUrB,KAAKX,YACtBV,GAAG,kBAJL,kBAQD8B,Y,GAlKFc,aCOJC,MAff,WAEE,OACE,yBAAKV,UAAU,OACb,kBAAC,OAAD,CAAMW,OAAK,GACT,kBAAC,MAAD,CAAKC,OAAO,MACV,kBAAC,MAAD,CAAKT,GAAI,EAAGH,UAAU,eACpB,kBAAC,EAAD,WCCQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLa,QAAQb,MAAMA,EAAMiD,c","file":"static/js/main.49f307fe.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Col, Grid, Row} from \"react-flexbox-grid\";\n\n\nconst ResetIcon = () => (\n  <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M9 1.17C13.3244 1.17 16.83 4.67561 16.83 9C16.83 13.3244 13.3244 16.83 9 16.83V18C13.9706 18 18 13.9706 18 9C18 4.02944 13.9706 0 9 0C5.64428 0 2.71752 1.83656 1.17 4.55937C0.936352 4.97046 0.734144 5.40177 0.566648 5.85L1.72363 6.10242C1.88368 5.70084 2.07602 5.31564 2.29743 4.95C3.66943 2.68426 6.15788 1.17 9 1.17Z\" />\n    <path d=\"M9 16.83V18C6.26811 18 3.8205 16.7828 2.16993 14.8611L3 14.0311C4.43633 15.7422 6.59113 16.83 9 16.83Z\" />\n    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.17 5.13H5.13H6.3V6.3H2.86102e-06V0H1.17V1.17V5.13Z\" />\n  </svg>\n)\n\nclass Form extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      id: true,\n      name: true,\n      year: true,\n      color: true,\n      pantone_value: true,\n      error: null,\n      isLoaded: false,\n      data: []\n    }\n\n    this.onClickColorReset = this.onClickColorReset.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  componentDidMount() {\n    const rememberState = localStorage.getItem('state');\n    this.setState({ ...JSON.parse(rememberState) });\n\n    fetch(\"https://reqres.in/api/unknown?per_page=12\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result.data)\n          this.setState({\n            isLoaded: true,\n            data: result.data\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  onClickColorReset = (e) => {\n    const resetState = {\n      id: true,\n      name: true,\n      year: true,\n      color: true,\n      pantone_value: true\n    }\n\n    this.setState({...resetState})\n    localStorage.setItem('state', JSON.stringify(resetState))\n  }\n\n\n  handleClick = (e) => {\n    const currentType = e.target.id;\n    this.setState((prevState) => {\n       return { [currentType]: !prevState[currentType] }\n    }, () => localStorage.setItem('state', JSON.stringify(this.state)))\n  }\n\n  render() {\n\n    const { id, name, year, color, pantone_value, data } = this.state;\n\n    const tableTemplate = data.map((el, i) => {\n      return (\n        <tr key={i} >\n          <td\n            className={this.state.id ? '' : 'invisible'}>\n            {el.id}\n          </td>\n          <td\n            className={this.state.name ? '' : 'invisible'}>\n            {el.name}\n          </td>\n          <td\n            className={this.state.year ? '' : 'invisible'}>\n            {el.year}\n          </td>\n          <td\n            className={this.state.color ? '' : 'invisible'}>\n            <div\n              style={{backgroundColor: el.color}}\n                 className=\"color-block\"></div>\n            {el.color}</td>\n          <td\n            className={this.state.pantone_value ? '' : 'invisible'}>\n            {el.pantone_value}\n          </td>\n        </tr>\n      )\n    })\n\n    return (\n\n      <div>\n        <Grid>\n          <Row>\n            <Col lg={12}\n                 className=\"table__head\" >\n              <div\n                className=\"table__title\">\n                Pantone colors\n              </div>\n              <button\n                className=\"btn-color\"\n                onClick={this.onClickColorReset}\n                disabled={id && name && year && color && pantone_value}\n              >\n                <ResetIcon />\n                Reset\n              </button>\n            </Col>\n            <Col lg={12}>\n              <table\n                className=\"table\">\n                  <tbody>\n                    <tr>\n                      <th\n                        className={this.state.id ? '' : 'invisible'}>\n                        <input type=\"checkbox\"\n                               onChange={this.handleClick}\n                               checked={this.state.id}\n                               id=\"id\"\n                        />\n                        Id\n                      </th>\n                      <th\n                        className={this.state.name ? '' : 'invisible'}>\n                        <input type=\"checkbox\"\n                               checked={this.state.name}\n                               onChange={this.handleClick}\n                               id=\"name\"/>\n                        Name\n                      </th>\n                      <th\n                        className={this.state.year ? '' : 'invisible'}>\n                        <input type=\"checkbox\"\n                               checked={this.state.year}\n                               onChange={this.handleClick}\n                        id=\"year\"/>\n                        Year\n                      </th>\n                      <th\n                        className={this.state.color ? '' : 'invisible'}>\n                        <input type=\"checkbox\"\n                               checked={this.state.color}\n                               onChange={this.handleClick}\n                        id=\"color\"/>\n                        Color\n                      </th>\n                      <th className={this.state.pantone_value ? '' : 'invisible'}>\n                        <input type=\"checkbox\"\n                               checked={this.state.pantone_value}\n                               onChange={this.handleClick}\n                        id=\"pantone_value\"/>\n                        Pantone value\n                      </th>\n                    </tr>\n                    {tableTemplate}\n                  </tbody>\n              </table>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport { Row, Col, Grid } from \"react-flexbox-grid\";\nimport Form from \"./Components/Form\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Grid fluid>\n        <Row center=\"xs\">\n          <Col lg={7} className=\"form-layout\">\n            <Form />\n          </Col>\n        </Row>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}